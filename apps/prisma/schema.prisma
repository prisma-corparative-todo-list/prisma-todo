// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                  String          @id @db.Uuid @default(uuid())
  userName            String          @unique
  firstName           String          @map("first_name") 
  lastName            String          @map("last_name")          
  email               String          @unique
  hashPass            String          @map("hash_pass")
  salt                String
  activationLink      String          @map("activation_link")
  isActivated         Boolean         @map("is_activated") @default(false)
  RefreshToken        RefreshToken?
  participant         Participant[]
  tasks               Task[]
  folders             Folder[]
}


model RefreshToken {
  id                  String          @id @db.Uuid @default(uuid())   
  token               String
  userId              String          @map("user_id") @db.Uuid @unique
  user                User            @relation(fields: [userId],references: [id], onDelete: Cascade)
}

model Group {
  id                  String          @id @db.Uuid @default(uuid())
  name                String          
  description         String
  logo                String?
  participants        Participant[]
  tasks               Task[]
}

model Participant {
  id                  String          @id @db.Uuid @default(uuid())
  group               Group           @relation(fields: [groupId],references: [id], onDelete: Cascade)
  groupId             String          @map("group_id")
  user                User            @relation(fields: [userId],references: [id], onDelete: Cascade)   
  userId              String          @map("user_id")   
}

model Task {
  id                  String           @id @db.Uuid @default(uuid())
  title               String
  description         String 
  groupId             String?          @map("group_id")
  group               Group?           @relation(references: [id], fields: [groupId])   
  userId              String
  user                User             @relation(references: [id],fields: [userId])
  deadLine            DateTime?
  folderId            String           @map("folder_id")
  folder              Folder           @relation(references: [id],fields: [folderId])
  steps               Step[]

}

model Step {
   id                  String           @id @db.Uuid @default(uuid())
   content             String
   taskId              String           @map("task_id")
   task                Task             @relation(fields: [taskId],references: [id])
}


model Folder {
  id                  String          @id @db.Uuid @default(uuid())
  title               String
  userId              String          @map("user_id")  
  user                User            @relation(references: [id],fields: [userId])
  tasks               Task[]
}